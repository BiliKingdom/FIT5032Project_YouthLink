rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Appointments collection - users can manage their own appointments, admins can manage all
    match /appointments/{appointmentId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Contact submissions - anyone can create, only admins can read
    match /contact_submissions/{submissionId} {
      allow create: if isAuthenticated();
      allow read, write: if isAdmin();
    }
    
    // Resources collection - public read, admin write
    match /resources/{resourceId} {
      allow read: if true; // Public read access for mental health resources
      allow write: if isAdmin();
    }
    
    // Service locations - public read, admin write
    match /service_locations/{locationId} {
      allow read: if true; // Public read access for service locations
      allow write: if isAdmin();
    }
    
    // Resource ratings - authenticated users can rate
    match /resource_comments/{commentId} {
      allow read: if true;
      allow create, update: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // System settings - public read, admin write
    match /system/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Events collection - public read, admin write
    match /events/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // User preferences - users can manage their own preferences
    match /user_preferences/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Courses collection - public read, admin write
    match /courses/{courseId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Course bookings - users can create and read their own, admins can manage all
    match /course_bookings/{bookingId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId || isAdmin());
    }

    // Course schedules - public read, admin write
    match /course_schedules/{scheduleId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Course exceptions - public read, admin write
    match /course_exceptions/{exceptionId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // One-time course sessions - public read, admin write
    match /one_time_sessions/{sessionId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Course instances - public read, authenticated write for bookings, admin full write
    match /course_instances/{instanceId} {
      allow read: if true;
      allow update: if isAuthenticated(); // Allow updating booking counts
      allow create, delete: if isAdmin();
    }

    // Deny all other requests
    match /{document=**} {
      allow read, write: if false;
    }
  }
}